def is_safe(board, row, col):
    # Check the current column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 1:
            return False

    return True

def solve_8_queens(board, row=1):
    if row >= len(board):
        return True  # All queens placed successfully

    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen
            if solve_8_queens(board, row + 1):  # Recurse to next row
                return True
            board[row][col] = 0  # Backtrack if placing fails

    return False  # No valid position found in this row

def print_board(board):
    for row in board:
        print(" ".join("Q" if col == 1 else "." for col in row))
    print("\n")

# Initialize 8x8 board with the first queen placed at position [0][0]
board = [[0] * 8 for _ in range(8)]
board[0][0] = 1  # Place the first queen

# Solve the 8-queens problem with the initial condition
if solve_8_queens(board):
    print("Final 8-queens board configuration:")
    print_board(board)
else:
    print("No solution found.")
